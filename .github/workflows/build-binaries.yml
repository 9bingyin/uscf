name: Build Binaries
on:
  push:
    tags:
      - '[0-9]*.[0-9]*'

jobs:
  build:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        include:
          - os: windows-latest
            arch: amd64
            binary_name: usque.exe
            asset_name: usque-windows-amd64.exe
          - os: windows-latest
            arch: arm64
            binary_name: usque.exe
            asset_name: usque-windows-arm64.exe
          - os: ubuntu-latest
            arch: amd64
            binary_name: usque
            asset_name: usque-linux-amd64
          - os: ubuntu-latest
            arch: arm64
            binary_name: usque
            asset_name: usque-linux-arm64
          - os: macos-latest
            arch: amd64
            binary_name: usque
            asset_name: usque-darwin-amd64
          - os: macos-latest
            arch: arm64
            binary_name: usque
            asset_name: usque-darwin-arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Extract tag name
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update version in Go code
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/version = \"dev\"/version = \"${{ steps.tag.outputs.VERSION }}\"/g" cmd/version.go
          else
            sed -i "s/version = \"dev\"/version = \"${{ steps.tag.outputs.VERSION }}\"/g" cmd/version.go
          fi
        shell: bash

      - name: Build Binary
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -v -o ${{ matrix.binary_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.binary_name }}
          retention-days: 5

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract tag name
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release
          gh release create ${{ steps.tag.outputs.VERSION }} \
            --title "Release ${{ steps.tag.outputs.VERSION }}" \
            --generate-notes
          
          # Upload all binary assets
          for dir in ./artifacts/*/; do
            asset_name=$(basename "$dir")
            file_path=$(find "$dir" -type f | head -1)
            if [ -f "$file_path" ]; then
              echo "Uploading $asset_name from $file_path"
              gh release upload ${{ steps.tag.outputs.VERSION }} "$file_path#$asset_name"
            fi
          done
